// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"context"
	"main/ent/file"
	"main/ent/schema"
	"time"

	"github.com/google/uuid"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	fileMixin := schema.File{}.Mixin()
	file.Policy = privacy.NewPolicies(schema.File{})
	file.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := file.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	fileMixinHooks0 := fileMixin[0].Hooks()

	file.Hooks[1] = fileMixinHooks0[0]
	fileMixinInters0 := fileMixin[0].Interceptors()
	fileMixinInters2 := fileMixin[2].Interceptors()
	file.Interceptors[0] = fileMixinInters0[0]
	file.Interceptors[1] = fileMixinInters2[0]
	fileMixinFields1 := fileMixin[1].Fields()
	_ = fileMixinFields1
	fileFields := schema.File{}.Fields()
	_ = fileFields
	// fileDescCreateTime is the schema descriptor for create_time field.
	fileDescCreateTime := fileMixinFields1[0].Descriptor()
	// file.DefaultCreateTime holds the default value on creation for the create_time field.
	file.DefaultCreateTime = fileDescCreateTime.Default.(func() time.Time)
	// fileDescUpdateTime is the schema descriptor for update_time field.
	fileDescUpdateTime := fileMixinFields1[1].Descriptor()
	// file.DefaultUpdateTime holds the default value on creation for the update_time field.
	file.DefaultUpdateTime = fileDescUpdateTime.Default.(func() time.Time)
	// file.UpdateDefaultUpdateTime holds the default value on update for the update_time field.
	file.UpdateDefaultUpdateTime = fileDescUpdateTime.UpdateDefault.(func() time.Time)
	// fileDescOriginalName is the schema descriptor for original_name field.
	fileDescOriginalName := fileFields[2].Descriptor()
	// file.OriginalNameValidator is a validator for the "original_name" field. It is called by the builders before save.
	file.OriginalNameValidator = fileDescOriginalName.Validators[0].(func(string) error)
	// fileDescStorageKey is the schema descriptor for storage_key field.
	fileDescStorageKey := fileFields[3].Descriptor()
	// file.StorageKeyValidator is a validator for the "storage_key" field. It is called by the builders before save.
	file.StorageKeyValidator = fileDescStorageKey.Validators[0].(func(string) error)
	// fileDescMimeType is the schema descriptor for mime_type field.
	fileDescMimeType := fileFields[4].Descriptor()
	// file.MimeTypeValidator is a validator for the "mime_type" field. It is called by the builders before save.
	file.MimeTypeValidator = fileDescMimeType.Validators[0].(func(string) error)
	// fileDescSize is the schema descriptor for size field.
	fileDescSize := fileFields[5].Descriptor()
	// file.SizeValidator is a validator for the "size" field. It is called by the builders before save.
	file.SizeValidator = fileDescSize.Validators[0].(func(int64) error)
	// fileDescID is the schema descriptor for id field.
	fileDescID := fileFields[0].Descriptor()
	// file.DefaultID holds the default value on creation for the id field.
	file.DefaultID = fileDescID.Default.(func() uuid.UUID)
}

const (
	Version = "v0.14.5"                                         // Version of ent codegen.
	Sum     = "h1:Rj2WOYJtCkWyFo6a+5wB3EfBRP0rnx1fMk6gGA0UUe4=" // Sum of ent codegen.
)
