// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/ent/file"
	"main/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// FileUpdate is the builder for updating File entities.
type FileUpdate struct {
	config
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the FileUpdate builder.
func (_u *FileUpdate) Where(ps ...predicate.File) *FileUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetUpdateTime sets the "update_time" field.
func (_u *FileUpdate) SetUpdateTime(v time.Time) *FileUpdate {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetOriginalName sets the "original_name" field.
func (_u *FileUpdate) SetOriginalName(v string) *FileUpdate {
	_u.mutation.SetOriginalName(v)
	return _u
}

// SetNillableOriginalName sets the "original_name" field if the given value is not nil.
func (_u *FileUpdate) SetNillableOriginalName(v *string) *FileUpdate {
	if v != nil {
		_u.SetOriginalName(*v)
	}
	return _u
}

// SetStorageKey sets the "storage_key" field.
func (_u *FileUpdate) SetStorageKey(v string) *FileUpdate {
	_u.mutation.SetStorageKey(v)
	return _u
}

// SetNillableStorageKey sets the "storage_key" field if the given value is not nil.
func (_u *FileUpdate) SetNillableStorageKey(v *string) *FileUpdate {
	if v != nil {
		_u.SetStorageKey(*v)
	}
	return _u
}

// SetMimeType sets the "mime_type" field.
func (_u *FileUpdate) SetMimeType(v string) *FileUpdate {
	_u.mutation.SetMimeType(v)
	return _u
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (_u *FileUpdate) SetNillableMimeType(v *string) *FileUpdate {
	if v != nil {
		_u.SetMimeType(*v)
	}
	return _u
}

// SetSize sets the "size" field.
func (_u *FileUpdate) SetSize(v int64) *FileUpdate {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *FileUpdate) SetNillableSize(v *int64) *FileUpdate {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *FileUpdate) AddSize(v int64) *FileUpdate {
	_u.mutation.AddSize(v)
	return _u
}

// SetPath sets the "path" field.
func (_u *FileUpdate) SetPath(v string) *FileUpdate {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *FileUpdate) SetNillablePath(v *string) *FileUpdate {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *FileUpdate) ClearPath() *FileUpdate {
	_u.mutation.ClearPath()
	return _u
}

// SetDescription sets the "description" field.
func (_u *FileUpdate) SetDescription(v string) *FileUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *FileUpdate) SetNillableDescription(v *string) *FileUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *FileUpdate) ClearDescription() *FileUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *FileUpdate) SetMetadata(v map[string]interface{}) *FileUpdate {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *FileUpdate) ClearMetadata() *FileUpdate {
	_u.mutation.ClearMetadata()
	return _u
}

// Mutation returns the FileMutation object of the builder.
func (_u *FileUpdate) Mutation() *FileMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *FileUpdate) Save(ctx context.Context) (int, error) {
	if err := _u.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *FileUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FileUpdate) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if file.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized file.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := file.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileUpdate) check() error {
	if v, ok := _u.mutation.OriginalName(); ok {
		if err := file.OriginalNameValidator(v); err != nil {
			return &ValidationError{Name: "original_name", err: fmt.Errorf(`ent: validator failed for field "File.original_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StorageKey(); ok {
		if err := file.StorageKeyValidator(v); err != nil {
			return &ValidationError{Name: "storage_key", err: fmt.Errorf(`ent: validator failed for field "File.storage_key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MimeType(); ok {
		if err := file.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "File.mime_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Size(); ok {
		if err := file.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "File.size": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *FileUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdate {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *FileUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(file.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.OriginalName(); ok {
		_spec.SetField(file.FieldOriginalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.StorageKey(); ok {
		_spec.SetField(file.FieldStorageKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(file.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(file.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(file.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(file.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(file.FieldMetadata, field.TypeJSON)
	}
	_spec.AddModifiers(_u.modifiers...)
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// FileUpdateOne is the builder for updating a single File entity.
type FileUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *FileMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUpdateTime sets the "update_time" field.
func (_u *FileUpdateOne) SetUpdateTime(v time.Time) *FileUpdateOne {
	_u.mutation.SetUpdateTime(v)
	return _u
}

// SetOriginalName sets the "original_name" field.
func (_u *FileUpdateOne) SetOriginalName(v string) *FileUpdateOne {
	_u.mutation.SetOriginalName(v)
	return _u
}

// SetNillableOriginalName sets the "original_name" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableOriginalName(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetOriginalName(*v)
	}
	return _u
}

// SetStorageKey sets the "storage_key" field.
func (_u *FileUpdateOne) SetStorageKey(v string) *FileUpdateOne {
	_u.mutation.SetStorageKey(v)
	return _u
}

// SetNillableStorageKey sets the "storage_key" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableStorageKey(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetStorageKey(*v)
	}
	return _u
}

// SetMimeType sets the "mime_type" field.
func (_u *FileUpdateOne) SetMimeType(v string) *FileUpdateOne {
	_u.mutation.SetMimeType(v)
	return _u
}

// SetNillableMimeType sets the "mime_type" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableMimeType(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetMimeType(*v)
	}
	return _u
}

// SetSize sets the "size" field.
func (_u *FileUpdateOne) SetSize(v int64) *FileUpdateOne {
	_u.mutation.ResetSize()
	_u.mutation.SetSize(v)
	return _u
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableSize(v *int64) *FileUpdateOne {
	if v != nil {
		_u.SetSize(*v)
	}
	return _u
}

// AddSize adds value to the "size" field.
func (_u *FileUpdateOne) AddSize(v int64) *FileUpdateOne {
	_u.mutation.AddSize(v)
	return _u
}

// SetPath sets the "path" field.
func (_u *FileUpdateOne) SetPath(v string) *FileUpdateOne {
	_u.mutation.SetPath(v)
	return _u
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillablePath(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetPath(*v)
	}
	return _u
}

// ClearPath clears the value of the "path" field.
func (_u *FileUpdateOne) ClearPath() *FileUpdateOne {
	_u.mutation.ClearPath()
	return _u
}

// SetDescription sets the "description" field.
func (_u *FileUpdateOne) SetDescription(v string) *FileUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *FileUpdateOne) SetNillableDescription(v *string) *FileUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *FileUpdateOne) ClearDescription() *FileUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetMetadata sets the "metadata" field.
func (_u *FileUpdateOne) SetMetadata(v map[string]interface{}) *FileUpdateOne {
	_u.mutation.SetMetadata(v)
	return _u
}

// ClearMetadata clears the value of the "metadata" field.
func (_u *FileUpdateOne) ClearMetadata() *FileUpdateOne {
	_u.mutation.ClearMetadata()
	return _u
}

// Mutation returns the FileMutation object of the builder.
func (_u *FileUpdateOne) Mutation() *FileMutation {
	return _u.mutation
}

// Where appends a list predicates to the FileUpdate builder.
func (_u *FileUpdateOne) Where(ps ...predicate.File) *FileUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *FileUpdateOne) Select(field string, fields ...string) *FileUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated File entity.
func (_u *FileUpdateOne) Save(ctx context.Context) (*File, error) {
	if err := _u.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *FileUpdateOne) SaveX(ctx context.Context) *File {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *FileUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *FileUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *FileUpdateOne) defaults() error {
	if _, ok := _u.mutation.UpdateTime(); !ok {
		if file.UpdateDefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized file.UpdateDefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := file.UpdateDefaultUpdateTime()
		_u.mutation.SetUpdateTime(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_u *FileUpdateOne) check() error {
	if v, ok := _u.mutation.OriginalName(); ok {
		if err := file.OriginalNameValidator(v); err != nil {
			return &ValidationError{Name: "original_name", err: fmt.Errorf(`ent: validator failed for field "File.original_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.StorageKey(); ok {
		if err := file.StorageKeyValidator(v); err != nil {
			return &ValidationError{Name: "storage_key", err: fmt.Errorf(`ent: validator failed for field "File.storage_key": %w`, err)}
		}
	}
	if v, ok := _u.mutation.MimeType(); ok {
		if err := file.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "File.mime_type": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Size(); ok {
		if err := file.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "File.size": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (_u *FileUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *FileUpdateOne {
	_u.modifiers = append(_u.modifiers, modifiers...)
	return _u
}

func (_u *FileUpdateOne) sqlSave(ctx context.Context) (_node *File, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(file.Table, file.Columns, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "File.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, file.FieldID)
		for _, f := range fields {
			if !file.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != file.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.UpdateTime(); ok {
		_spec.SetField(file.FieldUpdateTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.OriginalName(); ok {
		_spec.SetField(file.FieldOriginalName, field.TypeString, value)
	}
	if value, ok := _u.mutation.StorageKey(); ok {
		_spec.SetField(file.FieldStorageKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
	}
	if value, ok := _u.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedSize(); ok {
		_spec.AddField(file.FieldSize, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
	}
	if _u.mutation.PathCleared() {
		_spec.ClearField(file.FieldPath, field.TypeString)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(file.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(file.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.Metadata(); ok {
		_spec.SetField(file.FieldMetadata, field.TypeJSON, value)
	}
	if _u.mutation.MetadataCleared() {
		_spec.ClearField(file.FieldMetadata, field.TypeJSON)
	}
	_spec.AddModifiers(_u.modifiers...)
	_node = &File{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{file.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
