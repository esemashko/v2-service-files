// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"encoding/json"

	"github.com/google/uuid"
)

// Node in the graph.
type Node struct {
	ID     uuid.UUID `json:"id,omitempty"`     // node id.
	Type   string    `json:"type,omitempty"`   // node type.
	Fields []*Field  `json:"fields,omitempty"` // node fields.
	Edges  []*Edge   `json:"edges,omitempty"`  // node edges.
}

// Field of a node.
type Field struct {
	Type  string `json:"type,omitempty"`  // field type.
	Name  string `json:"name,omitempty"`  // field name (as in struct).
	Value string `json:"value,omitempty"` // stringified value.
}

// Edges between two nodes.
type Edge struct {
	Type string      `json:"type,omitempty"` // edge type.
	Name string      `json:"name,omitempty"` // edge name.
	IDs  []uuid.UUID `json:"ids,omitempty"`  // node ids (where this edge point to).
}

// Node implements Noder interface
func (_m *File) Node(ctx context.Context) (node *Node, err error) {
	node = &Node{
		ID:     _m.ID,
		Type:   "File",
		Fields: make([]*Field, 9),
		Edges:  make([]*Edge, 0),
	}
	var buf []byte
	if buf, err = json.Marshal(_m.CreateTime); err != nil {
		return nil, err
	}
	node.Fields[0] = &Field{
		Type:  "time.Time",
		Name:  "create_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(_m.UpdateTime); err != nil {
		return nil, err
	}
	node.Fields[1] = &Field{
		Type:  "time.Time",
		Name:  "update_time",
		Value: string(buf),
	}
	if buf, err = json.Marshal(_m.OriginalName); err != nil {
		return nil, err
	}
	node.Fields[2] = &Field{
		Type:  "string",
		Name:  "original_name",
		Value: string(buf),
	}
	if buf, err = json.Marshal(_m.StorageKey); err != nil {
		return nil, err
	}
	node.Fields[3] = &Field{
		Type:  "string",
		Name:  "storage_key",
		Value: string(buf),
	}
	if buf, err = json.Marshal(_m.MimeType); err != nil {
		return nil, err
	}
	node.Fields[4] = &Field{
		Type:  "string",
		Name:  "mime_type",
		Value: string(buf),
	}
	if buf, err = json.Marshal(_m.Size); err != nil {
		return nil, err
	}
	node.Fields[5] = &Field{
		Type:  "int64",
		Name:  "size",
		Value: string(buf),
	}
	if buf, err = json.Marshal(_m.Path); err != nil {
		return nil, err
	}
	node.Fields[6] = &Field{
		Type:  "string",
		Name:  "path",
		Value: string(buf),
	}
	if buf, err = json.Marshal(_m.Description); err != nil {
		return nil, err
	}
	node.Fields[7] = &Field{
		Type:  "string",
		Name:  "description",
		Value: string(buf),
	}
	if buf, err = json.Marshal(_m.Metadata); err != nil {
		return nil, err
	}
	node.Fields[8] = &Field{
		Type:  "map[string]interface {}",
		Name:  "metadata",
		Value: string(buf),
	}
	return node, nil
}

// Node returns the node with given global ID.
//
// This API helpful in case you want to build
// an administrator tool to browser all types in system.
func (c *Client) Node(ctx context.Context, id uuid.UUID) (*Node, error) {
	n, err := c.Noder(ctx, id)
	if err != nil {
		return nil, err
	}
	return n.Node(ctx)
}
