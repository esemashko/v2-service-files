// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/ent/file"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FileCreate is the builder for creating a File entity.
type FileCreate struct {
	config
	mutation *FileMutation
	hooks    []Hook
}

// SetCreateTime sets the "create_time" field.
func (_c *FileCreate) SetCreateTime(v time.Time) *FileCreate {
	_c.mutation.SetCreateTime(v)
	return _c
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (_c *FileCreate) SetNillableCreateTime(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetCreateTime(*v)
	}
	return _c
}

// SetUpdateTime sets the "update_time" field.
func (_c *FileCreate) SetUpdateTime(v time.Time) *FileCreate {
	_c.mutation.SetUpdateTime(v)
	return _c
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (_c *FileCreate) SetNillableUpdateTime(v *time.Time) *FileCreate {
	if v != nil {
		_c.SetUpdateTime(*v)
	}
	return _c
}

// SetCreatedBy sets the "created_by" field.
func (_c *FileCreate) SetCreatedBy(v uuid.UUID) *FileCreate {
	_c.mutation.SetCreatedBy(v)
	return _c
}

// SetOriginalName sets the "original_name" field.
func (_c *FileCreate) SetOriginalName(v string) *FileCreate {
	_c.mutation.SetOriginalName(v)
	return _c
}

// SetStorageKey sets the "storage_key" field.
func (_c *FileCreate) SetStorageKey(v string) *FileCreate {
	_c.mutation.SetStorageKey(v)
	return _c
}

// SetMimeType sets the "mime_type" field.
func (_c *FileCreate) SetMimeType(v string) *FileCreate {
	_c.mutation.SetMimeType(v)
	return _c
}

// SetSize sets the "size" field.
func (_c *FileCreate) SetSize(v int64) *FileCreate {
	_c.mutation.SetSize(v)
	return _c
}

// SetPath sets the "path" field.
func (_c *FileCreate) SetPath(v string) *FileCreate {
	_c.mutation.SetPath(v)
	return _c
}

// SetNillablePath sets the "path" field if the given value is not nil.
func (_c *FileCreate) SetNillablePath(v *string) *FileCreate {
	if v != nil {
		_c.SetPath(*v)
	}
	return _c
}

// SetDescription sets the "description" field.
func (_c *FileCreate) SetDescription(v string) *FileCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *FileCreate) SetNillableDescription(v *string) *FileCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetMetadata sets the "metadata" field.
func (_c *FileCreate) SetMetadata(v map[string]interface{}) *FileCreate {
	_c.mutation.SetMetadata(v)
	return _c
}

// SetID sets the "id" field.
func (_c *FileCreate) SetID(v uuid.UUID) *FileCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *FileCreate) SetNillableID(v *uuid.UUID) *FileCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the FileMutation object of the builder.
func (_c *FileCreate) Mutation() *FileMutation {
	return _c.mutation
}

// Save creates the File in the database.
func (_c *FileCreate) Save(ctx context.Context) (*File, error) {
	if err := _c.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *FileCreate) SaveX(ctx context.Context) *File {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *FileCreate) defaults() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		if file.DefaultCreateTime == nil {
			return fmt.Errorf("ent: uninitialized file.DefaultCreateTime (forgotten import ent/runtime?)")
		}
		v := file.DefaultCreateTime()
		_c.mutation.SetCreateTime(v)
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		if file.DefaultUpdateTime == nil {
			return fmt.Errorf("ent: uninitialized file.DefaultUpdateTime (forgotten import ent/runtime?)")
		}
		v := file.DefaultUpdateTime()
		_c.mutation.SetUpdateTime(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		if file.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized file.DefaultID (forgotten import ent/runtime?)")
		}
		v := file.DefaultID()
		_c.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (_c *FileCreate) check() error {
	if _, ok := _c.mutation.CreateTime(); !ok {
		return &ValidationError{Name: "create_time", err: errors.New(`ent: missing required field "File.create_time"`)}
	}
	if _, ok := _c.mutation.UpdateTime(); !ok {
		return &ValidationError{Name: "update_time", err: errors.New(`ent: missing required field "File.update_time"`)}
	}
	if _, ok := _c.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "File.created_by"`)}
	}
	if _, ok := _c.mutation.OriginalName(); !ok {
		return &ValidationError{Name: "original_name", err: errors.New(`ent: missing required field "File.original_name"`)}
	}
	if v, ok := _c.mutation.OriginalName(); ok {
		if err := file.OriginalNameValidator(v); err != nil {
			return &ValidationError{Name: "original_name", err: fmt.Errorf(`ent: validator failed for field "File.original_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.StorageKey(); !ok {
		return &ValidationError{Name: "storage_key", err: errors.New(`ent: missing required field "File.storage_key"`)}
	}
	if v, ok := _c.mutation.StorageKey(); ok {
		if err := file.StorageKeyValidator(v); err != nil {
			return &ValidationError{Name: "storage_key", err: fmt.Errorf(`ent: validator failed for field "File.storage_key": %w`, err)}
		}
	}
	if _, ok := _c.mutation.MimeType(); !ok {
		return &ValidationError{Name: "mime_type", err: errors.New(`ent: missing required field "File.mime_type"`)}
	}
	if v, ok := _c.mutation.MimeType(); ok {
		if err := file.MimeTypeValidator(v); err != nil {
			return &ValidationError{Name: "mime_type", err: fmt.Errorf(`ent: validator failed for field "File.mime_type": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Size(); !ok {
		return &ValidationError{Name: "size", err: errors.New(`ent: missing required field "File.size"`)}
	}
	if v, ok := _c.mutation.Size(); ok {
		if err := file.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "File.size": %w`, err)}
		}
	}
	return nil
}

func (_c *FileCreate) sqlSave(ctx context.Context) (*File, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *FileCreate) createSpec() (*File, *sqlgraph.CreateSpec) {
	var (
		_node = &File{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(file.Table, sqlgraph.NewFieldSpec(file.FieldID, field.TypeUUID))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := _c.mutation.CreateTime(); ok {
		_spec.SetField(file.FieldCreateTime, field.TypeTime, value)
		_node.CreateTime = value
	}
	if value, ok := _c.mutation.UpdateTime(); ok {
		_spec.SetField(file.FieldUpdateTime, field.TypeTime, value)
		_node.UpdateTime = value
	}
	if value, ok := _c.mutation.CreatedBy(); ok {
		_spec.SetField(file.FieldCreatedBy, field.TypeUUID, value)
		_node.CreatedBy = value
	}
	if value, ok := _c.mutation.OriginalName(); ok {
		_spec.SetField(file.FieldOriginalName, field.TypeString, value)
		_node.OriginalName = value
	}
	if value, ok := _c.mutation.StorageKey(); ok {
		_spec.SetField(file.FieldStorageKey, field.TypeString, value)
		_node.StorageKey = value
	}
	if value, ok := _c.mutation.MimeType(); ok {
		_spec.SetField(file.FieldMimeType, field.TypeString, value)
		_node.MimeType = value
	}
	if value, ok := _c.mutation.Size(); ok {
		_spec.SetField(file.FieldSize, field.TypeInt64, value)
		_node.Size = value
	}
	if value, ok := _c.mutation.Path(); ok {
		_spec.SetField(file.FieldPath, field.TypeString, value)
		_node.Path = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(file.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.Metadata(); ok {
		_spec.SetField(file.FieldMetadata, field.TypeJSON, value)
		_node.Metadata = value
	}
	return _node, _spec
}

// FileCreateBulk is the builder for creating many File entities in bulk.
type FileCreateBulk struct {
	config
	err      error
	builders []*FileCreate
}

// Save creates the File entities in the database.
func (_c *FileCreateBulk) Save(ctx context.Context) ([]*File, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*File, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *FileCreateBulk) SaveX(ctx context.Context) []*File {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *FileCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *FileCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
