# Requires authenticated user
directive @auth on FIELD_DEFINITION
# Requires admin role
directive @admin on FIELD_DEFINITION
# Requires member role (member or admin)
directive @member on FIELD_DEFINITION


directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateFileInput is used for create File object.
Input was generated by ent.
"""
input CreateFileInput {
  """
  Оригинальное имя загруженного файла
  """
  originalName: String!
  """
  Уникальный ключ в хранилище S3
  """
  storageKey: String!
  """
  MIME-тип файла
  """
  mimeType: String!
  """
  Размер файла в байтах
  """
  size: Int!
  """
  Путь к файлу в хранилище (deprecated, используется storage_key)
  """
  path: String
  """
  Описание файла
  """
  description: String
  """
  Дополнительные метаданные файла
  """
  metadata: Map
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type File implements Node {
  id: ID!
  createTime: Time!
  updateTime: Time!
  """
  Оригинальное имя загруженного файла
  """
  originalName: String!
  """
  Уникальный ключ в хранилище S3
  """
  storageKey: String!
  """
  MIME-тип файла
  """
  mimeType: String!
  """
  Размер файла в байтах
  """
  size: Int!
  """
  Путь к файлу в хранилище (deprecated, используется storage_key)
  """
  path: String
  """
  Описание файла
  """
  description: String
  """
  Дополнительные метаданные файла
  """
  metadata: Map
}
"""
A connection to a list of items.
"""
type FileConnection {
  """
  A list of edges.
  """
  edges: [FileEdge]
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}
"""
An edge in a connection.
"""
type FileEdge {
  """
  The item at the end of the edge.
  """
  node: File
  """
  A cursor for use in pagination.
  """
  cursor: Cursor!
}
"""
Ordering options for File connections
"""
input FileOrder {
  """
  The ordering direction.
  """
  direction: OrderDirection! = ASC
  """
  The field by which to order Files.
  """
  field: FileOrderField!
}
"""
Properties by which File connections can be ordered.
"""
enum FileOrderField {
  CREATE_TIME
  UPDATE_TIME
}
"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  not: FileWhereInput
  and: [FileWhereInput!]
  or: [FileWhereInput!]
  """
  id field predicates
  """
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """
  create_time field predicates
  """
  createTime: Time
  createTimeNEQ: Time
  createTimeIn: [Time!]
  createTimeNotIn: [Time!]
  createTimeGT: Time
  createTimeGTE: Time
  createTimeLT: Time
  createTimeLTE: Time
  """
  update_time field predicates
  """
  updateTime: Time
  updateTimeNEQ: Time
  updateTimeIn: [Time!]
  updateTimeNotIn: [Time!]
  updateTimeGT: Time
  updateTimeGTE: Time
  updateTimeLT: Time
  updateTimeLTE: Time
  """
  original_name field predicates
  """
  originalName: String
  originalNameNEQ: String
  originalNameIn: [String!]
  originalNameNotIn: [String!]
  originalNameGT: String
  originalNameGTE: String
  originalNameLT: String
  originalNameLTE: String
  originalNameContains: String
  originalNameHasPrefix: String
  originalNameHasSuffix: String
  originalNameEqualFold: String
  originalNameContainsFold: String
  """
  storage_key field predicates
  """
  storageKey: String
  storageKeyNEQ: String
  storageKeyIn: [String!]
  storageKeyNotIn: [String!]
  storageKeyGT: String
  storageKeyGTE: String
  storageKeyLT: String
  storageKeyLTE: String
  storageKeyContains: String
  storageKeyHasPrefix: String
  storageKeyHasSuffix: String
  storageKeyEqualFold: String
  storageKeyContainsFold: String
  """
  mime_type field predicates
  """
  mimeType: String
  mimeTypeNEQ: String
  mimeTypeIn: [String!]
  mimeTypeNotIn: [String!]
  mimeTypeGT: String
  mimeTypeGTE: String
  mimeTypeLT: String
  mimeTypeLTE: String
  mimeTypeContains: String
  mimeTypeHasPrefix: String
  mimeTypeHasSuffix: String
  mimeTypeEqualFold: String
  mimeTypeContainsFold: String
  """
  size field predicates
  """
  size: Int
  sizeNEQ: Int
  sizeIn: [Int!]
  sizeNotIn: [Int!]
  sizeGT: Int
  sizeGTE: Int
  sizeLT: Int
  sizeLTE: Int
  """
  path field predicates
  """
  path: String
  pathNEQ: String
  pathIn: [String!]
  pathNotIn: [String!]
  pathGT: String
  pathGTE: String
  pathLT: String
  pathLTE: String
  pathContains: String
  pathHasPrefix: String
  pathHasSuffix: String
  pathIsNil: Boolean
  pathNotNil: Boolean
  pathEqualFold: String
  pathContainsFold: String
  """
  description field predicates
  """
  description: String
  descriptionNEQ: String
  descriptionIn: [String!]
  descriptionNotIn: [String!]
  descriptionGT: String
  descriptionGTE: String
  descriptionLT: String
  descriptionLTE: String
  descriptionContains: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIsNil: Boolean
  descriptionNotNil: Boolean
  descriptionEqualFold: String
  descriptionContainsFold: String
}
"""
The builtin Map type
"""
scalar Map
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "main/ent.Noder") {
  """
  The id of the object.
  """
  id: ID!
}
"""
Possible directions in which to order a list of items when provided an `orderBy` argument.
"""
enum OrderDirection {
  """
  Specifies an ascending order for a given `orderBy` argument.
  """
  ASC
  """
  Specifies a descending order for a given `orderBy` argument.
  """
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo @shareable {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: Cursor
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: Cursor
}
type Query @shareable {
  files(
    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: Cursor

    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: Cursor

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Ordering options for Files returned from the connection.
    """
    orderBy: [FileOrder!]

    """
    Filtering options for Files returned from the connection.
    """
    where: FileWhereInput
  ): FileConnection!
}
"""
The builtin Time type
"""
scalar Time
"""
UpdateFileInput is used for update File object.
Input was generated by ent.
"""
input UpdateFileInput {
  """
  Оригинальное имя загруженного файла
  """
  originalName: String
  """
  Уникальный ключ в хранилище S3
  """
  storageKey: String
  """
  MIME-тип файла
  """
  mimeType: String
  """
  Размер файла в байтах
  """
  size: Int
  """
  Путь к файлу в хранилище (deprecated, используется storage_key)
  """
  path: String
  clearPath: Boolean
  """
  Описание файла
  """
  description: String
  clearDescription: Boolean
  """
  Дополнительные метаданные файла
  """
  metadata: Map
  clearMetadata: Boolean
}


scalar UUID

extend schema
  @link(url: "https://specs.apollo.dev/federation/v2.5", import: ["@key", "@shareable", "@provides", "@external", "@tag", "@override", "@inaccessible", "@requires"])

type User @key(fields: "id") {
    id: ID!
}

extend type File @key(fields: "id") {
    createdBy: User!
}


extend type Mutation {
    uploadFile(input: CreateFileInput!): File! @auth
    updateFile(id: UUID!, input: UpdateFileInput!): File! @auth
    deleteFile(id: UUID!): Boolean! @auth
}

extend type File {
    # Computed permission: whether current user can delete this file
    canDelete: Boolean! @auth
}


