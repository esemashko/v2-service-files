package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.78

import (
	"context"
	"fmt"
	"main/ent"

	"entgo.io/contrib/entgql"
	"github.com/google/uuid"
)

func (r *queryResolver) Files(ctx context.Context, after *entgql.Cursor[uuid.UUID], first *int, before *entgql.Cursor[uuid.UUID], last *int, orderBy []*ent.FileOrder, where *ent.FileWhereInput) (*ent.FileConnection, error) {
	client := r.getClient(ctx)

	query := client.File.Query()

	query, err := query.CollectFields(ctx)
	if err != nil {
		return nil, err
	}

	return query.Paginate(ctx, after, first, before, last,
		ent.WithFileOrder(orderBy),
		ent.WithFileFilter(where.Filter),
	)
}

// UploadFile is the resolver for the uploadFile field.
func (r *mutationResolver) UploadFile(ctx context.Context, input ent.CreateFileInput) (*ent.File, error) {
	panic(fmt.Errorf("not implemented: UploadFile - uploadFile"))
}

// UpdateFile is the resolver for the updateFile field.
func (r *mutationResolver) UpdateFile(ctx context.Context, id uuid.UUID, input ent.UpdateFileInput) (*ent.File, error) {
	panic(fmt.Errorf("not implemented: UpdateFile - updateFile"))
}

// DeleteFile is the resolver for the deleteFile field.
func (r *mutationResolver) DeleteFile(ctx context.Context, id uuid.UUID) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteFile - deleteFile"))
}
